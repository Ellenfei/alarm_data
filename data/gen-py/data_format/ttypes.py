#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class BussinessType(object):
    VIDEO = 1
    ECOMMERCE = 2
    EMAIL = 3
    FILE_TRANSFER = 4

    _VALUES_TO_NAMES = {
        1: "VIDEO",
        2: "ECOMMERCE",
        3: "EMAIL",
        4: "FILE_TRANSFER",
    }

    _NAMES_TO_VALUES = {
        "VIDEO": 1,
        "ECOMMERCE": 2,
        "EMAIL": 3,
        "FILE_TRANSFER": 4,
    }


class Data(object):
    """
    Attributes:
     - nodeS
     - nodeD
     - bandwidth
     - delay
     - loss
     - flag
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'nodeS', None, None, ),  # 1
        (2, TType.I32, 'nodeD', None, None, ),  # 2
        (3, TType.DOUBLE, 'bandwidth', None, None, ),  # 3
        (4, TType.DOUBLE, 'delay', None, None, ),  # 4
        (5, TType.DOUBLE, 'loss', None, None, ),  # 5
        (6, TType.I32, 'flag', None, None, ),  # 6
    )

    def __init__(self, nodeS=None, nodeD=None, bandwidth=None, delay=None, loss=None, flag=None,):
        self.nodeS = nodeS
        self.nodeD = nodeD
        self.bandwidth = bandwidth
        self.delay = delay
        self.loss = loss
        self.flag = flag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.nodeS = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.nodeD = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.bandwidth = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.delay = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.loss = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.flag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Data')
        if self.nodeS is not None:
            oprot.writeFieldBegin('nodeS', TType.I32, 1)
            oprot.writeI32(self.nodeS)
            oprot.writeFieldEnd()
        if self.nodeD is not None:
            oprot.writeFieldBegin('nodeD', TType.I32, 2)
            oprot.writeI32(self.nodeD)
            oprot.writeFieldEnd()
        if self.bandwidth is not None:
            oprot.writeFieldBegin('bandwidth', TType.DOUBLE, 3)
            oprot.writeDouble(self.bandwidth)
            oprot.writeFieldEnd()
        if self.delay is not None:
            oprot.writeFieldBegin('delay', TType.DOUBLE, 4)
            oprot.writeDouble(self.delay)
            oprot.writeFieldEnd()
        if self.loss is not None:
            oprot.writeFieldBegin('loss', TType.DOUBLE, 5)
            oprot.writeDouble(self.loss)
            oprot.writeFieldEnd()
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.I32, 6)
            oprot.writeI32(self.flag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Parameters(object):
    """
    Attributes:
     - w1
     - b1
     - w2
     - b2
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'w1', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 1
        (2, TType.LIST, 'b1', (TType.DOUBLE, None, False), None, ),  # 2
        (3, TType.LIST, 'w2', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 3
        (4, TType.LIST, 'b2', (TType.DOUBLE, None, False), None, ),  # 4
    )

    def __init__(self, w1=None, b1=None, w2=None, b2=None,):
        self.w1 = w1
        self.b1 = b1
        self.w2 = w2
        self.b2 = b2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.w1 = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = []
                        (_etype9, _size6) = iprot.readListBegin()
                        for _i10 in range(_size6):
                            _elem11 = iprot.readDouble()
                            _elem5.append(_elem11)
                        iprot.readListEnd()
                        self.w1.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.b1 = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readDouble()
                        self.b1.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.w2 = []
                    (_etype21, _size18) = iprot.readListBegin()
                    for _i22 in range(_size18):
                        _elem23 = []
                        (_etype27, _size24) = iprot.readListBegin()
                        for _i28 in range(_size24):
                            _elem29 = iprot.readDouble()
                            _elem23.append(_elem29)
                        iprot.readListEnd()
                        self.w2.append(_elem23)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.b2 = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readDouble()
                        self.b2.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Parameters')
        if self.w1 is not None:
            oprot.writeFieldBegin('w1', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.w1))
            for iter36 in self.w1:
                oprot.writeListBegin(TType.DOUBLE, len(iter36))
                for iter37 in iter36:
                    oprot.writeDouble(iter37)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.b1 is not None:
            oprot.writeFieldBegin('b1', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.b1))
            for iter38 in self.b1:
                oprot.writeDouble(iter38)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.w2 is not None:
            oprot.writeFieldBegin('w2', TType.LIST, 3)
            oprot.writeListBegin(TType.LIST, len(self.w2))
            for iter39 in self.w2:
                oprot.writeListBegin(TType.DOUBLE, len(iter39))
                for iter40 in iter39:
                    oprot.writeDouble(iter40)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.b2 is not None:
            oprot.writeFieldBegin('b2', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.b2))
            for iter41 in self.b2:
                oprot.writeDouble(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
